using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Zerobot.CommandCenter
{
    /// <summary>
    ///  A simple representation of all possible command tokens, generated by a lexer.
    /// </summary>
    public enum CommandToken : byte
    {
        Move,
        Stop,
        Speed,

        MarkerDown,
        MarkerUp,
    }

    /// <summary>
    /// Represents a token expression, generated by the lexer. For example:
    /// 
    /// Using the Move token with the operands up and 4
    /// 
    /// TokenExpression(Move, [up, 4]);
    /// TokenExpression.ToString() = Move up 4 
    /// </summary>
    public class TokenExpression
    {
        private readonly CommandToken token;
        private readonly List<string> operands;

        public TokenExpression(CommandToken token, List<string> operands)
        {
            this.token = token;
            this.operands = operands;
        }

        public TokenExpression(string expression)
        {
            var words = expression.Split(" ");
            if (words.Length < 2)
            {
                throw new ArgumentException("Invalid Token Expression.");
            }
            
            operands = new List<string>();
            bool tokenFound = false;
            foreach (string word in words)
            {
                if (tokenFound)
                {
                    operands.Add(word);
                    continue;
                }

                try
                {
                    token = (CommandToken)Enum.Parse(typeof(CommandToken), word);
                }
                catch (ArgumentException)
                {
                    tokenFound = true;
                }
            }

            throw new ArgumentException("The given expression doesn't contain a valid CommandToken");
        }

        public override string ToString()
        {
            var builder = new StringBuilder();
            builder.Append(token.ToString());

            foreach (var operand in operands)
            {
                builder.Append(operand);
            }

            return builder.ToString();
        }
    }
}
